import os
import fnmatch
import shutil
import time


# Recursively finds all tests located in test files in upper folder 'test'
class Aggregate:
    def __init__(self):
        self.FOLDER_PATH = 'autogenerated'
        self.FOLDER_PATH = os.path.abspath(self.FOLDER_PATH)
        self.MAIN_FILE_NAME = 'runAllAutogeneratedTestsOctaveParallel.m'
        self.FILE_NAME_PREFIX = 'libmpcalg_'
        # List of files containing tests short enough that creating a thread for
        # them is slower than simply executing them
        self.FILES_NO_SEPARATE_TESTS = ['testDMCParameters',
            'testMPCSParameters', 'testGPCParameters', 'testMPCNOParameters']

    def get_m_files(self, start_path):
        m_files = []
        for root, dirs, files in os.walk(start_path):
            for f in files:
                if fnmatch.fnmatch(f, '*.m'): m_files.append(os.path.join(root, f))
        return m_files

    def get_tests(self, m_files):
        tests = []
        for f in m_files:
            if os.path.splitext(os.path.basename(f))[0] not in self.FILES_NO_SEPARATE_TESTS:
                with open(f) as fi:
                    for line in fi.readlines():
                        if fnmatch.fnmatch(line, "%!*"):
                            tests.append(line)
        return tests

    def clean_folder(self, folder_path):
        if os.path.exists(folder_path):
            print('Deleting autogenerated folder')
            shutil.rmtree(folder_path)

    def create_folder(self, folder_path):
        if not os.path.exists(folder_path):
            os.makedirs(folder_path)

    def create_file_for_every_test(self, tests):
        func_names = []
        file_paths = []
        for i, test in enumerate(tests):
            func_name = self.FILE_NAME_PREFIX + str(i)
            func_names.append(func_name)
            file_path = self.FOLDER_PATH + os.path.sep + func_name + '.m'
            file_paths.append(file_path)
            with open(file_path, 'w+') as f:
                f.write(test)
        return func_names

    def createMainParallelTestFile(self, func_names):
        with open(self.MAIN_FILE_NAME, 'w+') as f:
            # Main function containing test execution
            f.write('function runAllAutogeneratedTestsOctaveParallel\n')
            f.write("addpath('" + self.FOLDER_PATH + "');\n")
            f.write('% Start time measurement\n')
            f.write('tic\n')
            f.write('Utilities.loadPkgParallelInOctave();\n')
            f.write('chosenTests = {\n')
            for func_name in func_names + self.FILES_NO_SEPARATE_TESTS:
                f.write("'" + func_name + "',\n")
            f.write('};\n')
            f.write('vector_y = pararrayfun(nproc - nproc*0.5, @runAutogeneratedTestsOctaveParallel, chosenTests);\n')
            f.write('% End time measurement\n')
            f.write('toc\n')
            f.write("rmpath('" + self.FOLDER_PATH + "');\n")
            f.write('end\n\n')

            # Parallel function aggregating tests
            f.write('function result = runAutogeneratedTestsOctaveParallel(chosenTest)\n')
            f.write("if strcmp(chosenTest, '" + func_names[0] + "')\n")
            f.write('test ' + func_names[0] + ';\n')
            f.write('result = 1;\n')
            func_names.pop(0)
            for func_name in func_names + self.FILES_NO_SEPARATE_TESTS:
                f.write("elseif strcmp(chosenTest, '" + func_name + "')\n")
                f.write('test ' + func_name + ';\n')
                f.write('result = 1;\n')
            f.write('end\n')
            f.write('end\n')


    def run(self):
        self.clean_folder(self.FOLDER_PATH)
        m_files = self.get_m_files('../')
        tests = self.get_tests(m_files)
        self.create_folder(self.FOLDER_PATH)
        func_names = self.create_file_for_every_test(tests)
        self.createMainParallelTestFile(func_names)


if __name__ == "__main__":
    a = Aggregate()
    a.run()
